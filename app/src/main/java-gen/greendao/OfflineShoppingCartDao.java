package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ksfc.newfarmer.beans.dbbeans.OfflineShoppingCart;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "OFFLINE_SHOPPING_CART".
*/
public class OfflineShoppingCartDao extends AbstractDao<OfflineShoppingCart, String> {

    public static final String TABLENAME = "OFFLINE_SHOPPING_CART";

    /**
     * Properties of entity OfflineShoppingCart.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property SKUId = new Property(0, String.class, "SKUId", true, "SKUID");
        public final static Property Numbers = new Property(1, String.class, "numbers", false, "NUMBERS");
        public final static Property Additions = new Property(2, String.class, "additions", false, "ADDITIONS");
    };


    public OfflineShoppingCartDao(DaoConfig config) {
        super(config);
    }
    
    public OfflineShoppingCartDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"OFFLINE_SHOPPING_CART\" (" + //
                "\"SKUID\" TEXT PRIMARY KEY NOT NULL ," + // 0: SKUId
                "\"NUMBERS\" TEXT," + // 1: numbers
                "\"ADDITIONS\" TEXT);"); // 2: additions
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"OFFLINE_SHOPPING_CART\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, OfflineShoppingCart entity) {
        stmt.clearBindings();
 
        String SKUId = entity.getSKUId();
        if (SKUId != null) {
            stmt.bindString(1, SKUId);
        }
 
        String numbers = entity.getNumbers();
        if (numbers != null) {
            stmt.bindString(2, numbers);
        }
 
        String additions = entity.getAdditions();
        if (additions != null) {
            stmt.bindString(3, additions);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, OfflineShoppingCart entity) {
        stmt.clearBindings();
 
        String SKUId = entity.getSKUId();
        if (SKUId != null) {
            stmt.bindString(1, SKUId);
        }
 
        String numbers = entity.getNumbers();
        if (numbers != null) {
            stmt.bindString(2, numbers);
        }
 
        String additions = entity.getAdditions();
        if (additions != null) {
            stmt.bindString(3, additions);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public OfflineShoppingCart readEntity(Cursor cursor, int offset) {
        OfflineShoppingCart entity = new OfflineShoppingCart( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // SKUId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // numbers
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // additions
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, OfflineShoppingCart entity, int offset) {
        entity.setSKUId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setNumbers(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAdditions(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final String updateKeyAfterInsert(OfflineShoppingCart entity, long rowId) {
        return entity.getSKUId();
    }
    
    @Override
    public String getKey(OfflineShoppingCart entity) {
        if(entity != null) {
            return entity.getSKUId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
