package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ksfc.newfarmer.beans.dbbeans.InviteeEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "INVITEE_ENTITY".
*/
public class InviteeEntityDao extends AbstractDao<InviteeEntity, String> {

    public static final String TABLENAME = "INVITEE_ENTITY";

    /**
     * Properties of entity InviteeEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property UserId = new Property(0, String.class, "userId", true, "USER_ID");
        public final static Property Account = new Property(1, String.class, "account", false, "ACCOUNT");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Dateinvited = new Property(3, String.class, "dateinvited", false, "DATEINVITED");
        public final static Property Sex = new Property(4, boolean.class, "sex", false, "SEX");
        public final static Property NewOrdersNumber = new Property(5, int.class, "newOrdersNumber", false, "NEW_ORDERS_NUMBER");
        public final static Property NamePinyin = new Property(6, String.class, "namePinyin", false, "NAME_PINYIN");
        public final static Property NameInitial = new Property(7, String.class, "nameInitial", false, "NAME_INITIAL");
    };


    public InviteeEntityDao(DaoConfig config) {
        super(config);
    }
    
    public InviteeEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"INVITEE_ENTITY\" (" + //
                "\"USER_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: userId
                "\"ACCOUNT\" TEXT," + // 1: account
                "\"NAME\" TEXT," + // 2: name
                "\"DATEINVITED\" TEXT," + // 3: dateinvited
                "\"SEX\" INTEGER NOT NULL ," + // 4: sex
                "\"NEW_ORDERS_NUMBER\" INTEGER NOT NULL ," + // 5: newOrdersNumber
                "\"NAME_PINYIN\" TEXT," + // 6: namePinyin
                "\"NAME_INITIAL\" TEXT);"); // 7: nameInitial
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INVITEE_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, InviteeEntity entity) {
        stmt.clearBindings();
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(1, userId);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(2, account);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String dateinvited = entity.getDateinvited();
        if (dateinvited != null) {
            stmt.bindString(4, dateinvited);
        }
        stmt.bindLong(5, entity.getSex() ? 1L: 0L);
        stmt.bindLong(6, entity.getNewOrdersNumber());
 
        String namePinyin = entity.getNamePinyin();
        if (namePinyin != null) {
            stmt.bindString(7, namePinyin);
        }
 
        String nameInitial = entity.getNameInitial();
        if (nameInitial != null) {
            stmt.bindString(8, nameInitial);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, InviteeEntity entity) {
        stmt.clearBindings();
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(1, userId);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(2, account);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String dateinvited = entity.getDateinvited();
        if (dateinvited != null) {
            stmt.bindString(4, dateinvited);
        }
        stmt.bindLong(5, entity.getSex() ? 1L: 0L);
        stmt.bindLong(6, entity.getNewOrdersNumber());
 
        String namePinyin = entity.getNamePinyin();
        if (namePinyin != null) {
            stmt.bindString(7, namePinyin);
        }
 
        String nameInitial = entity.getNameInitial();
        if (nameInitial != null) {
            stmt.bindString(8, nameInitial);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public InviteeEntity readEntity(Cursor cursor, int offset) {
        InviteeEntity entity = new InviteeEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // userId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // account
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // dateinvited
            cursor.getShort(offset + 4) != 0, // sex
            cursor.getInt(offset + 5), // newOrdersNumber
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // namePinyin
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // nameInitial
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, InviteeEntity entity, int offset) {
        entity.setUserId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setAccount(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDateinvited(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSex(cursor.getShort(offset + 4) != 0);
        entity.setNewOrdersNumber(cursor.getInt(offset + 5));
        entity.setNamePinyin(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setNameInitial(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final String updateKeyAfterInsert(InviteeEntity entity, long rowId) {
        return entity.getUserId();
    }
    
    @Override
    public String getKey(InviteeEntity entity) {
        if(entity != null) {
            return entity.getUserId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
